#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function, unicode_literals

import argparse
import glob
import io
import json
import os.path
import pprint
import six
import sys

import intelmq.lib.message as message
import intelmq.lib.pipeline as pipeline
import intelmq.lib.utils as utils
from intelmq import DEFAULT_LOGGING_PATH, DEFAULTS_CONF_FILE, RUNTIME_CONF_FILE
from termstyle import bold, inverted

if sys.version_info[0] == 2:
    input = raw_input

APPNAME = "intelmqdump"
DESCRIPTION = """
description: intelmqctl is the tool to control intelmq system."""
USAGE = '''intelmqdump [botid]'''
# shortcut: description, takes ids, available for corrupted files
ACTIONS = {'r': ('(r)ecover by ids', True, False),
           'a': ('recover (a)ll', False, False),
           'e': ('delete (e)ntries', True, False),
           'd': ('(d)elete file', False, True),
           's': ('(s)how by ids', True, False),
           'q': ('(q)uit', False, True),
           }
AVAILABLE_IDS = [key for key, value in ACTIONS.items() if value[1]]


def dump_info(fname):
    info = 'defect'
    try:
        handle = io.open(fname, 'rt')
    except OSError as exc:
        info = 'unable to open file: {!s}'.format(exc)
    else:
        try:
            content = json.load(handle)
        except ValueError as exc:
            info = 'unable to load JSON: {!s}'.format(exc)
        else:
            try:
                info = "{!s} dumps".format(len(content.keys()))
            except AttributeError as exc:
                info = "unable to count dumps: {!s}".format(exc)
    finally:
        try:
            handle.close()
        except NameError:
            pass
    return info


def save_file(fname, content):
    with open(fname, 'wt') as handle:
        json.dump(content, handle)


def load_meta(dump):
    retval = []
    for key, value in dump.items():
        error = value['traceback'].splitlines()[-1]
        if len(error) > 200:
            error = error[:100] + '...' + error[-100:]
        retval.append((key, error))
    return retval


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog=APPNAME,
        usage=USAGE,
        epilog=DESCRIPTION
    )

    parser.add_argument('botid', metavar='botid', nargs='?',
                        default=None, help='botid to inspect dumps of')
    args = parser.parse_args()

    if args.botid is None:
        filenames = glob.glob(os.path.join(DEFAULT_LOGGING_PATH, '*.dump'))
        filenames = [(fname, fname[len(DEFAULT_LOGGING_PATH):-5])
                     for fname in filenames]

        length = max([len(value[1]) for value in filenames])
        print(bold("{c:>3}: {s:{l}} {i}".format(c='id', s='name (bot id)',
                                                i='content', l=length)))
        for count, (fname, shortname) in enumerate(filenames):
            info = dump_info(fname)
            print("{c:3}: {s:{l}} {i}".format(c=count, s=shortname, i=info,
                                              l=length))
        botid = input(inverted('Which dump file to process (id or name)? '))
        botid = botid.strip()
        if botid == 'q':
            exit(0)
        try:
            fname, botid = filenames[int(botid)]
        except ValueError:
            fname = os.path.join(DEFAULT_LOGGING_PATH, botid) + '.dump'
    else:
        botid = args.botid
        fname = os.path.join(DEFAULT_LOGGING_PATH, botid) + '.dump'

    if not os.path.isfile(fname):
        print(bold('Given file does not exist: {}'.format(fname)))
        exit(1)
    while True:
        info = dump_info(fname)
        print('Processing {}: {}'.format(bold(botid), info))
        try:
            with io.open(fname, 'rt') as handle:
                content = json.load(handle)
            meta = load_meta(content)
        except ValueError as exc:
            available_opts = [item[0] for item in ACTIONS.values() if item[2]]
            print(bold('Could not load file: {}\nRestricted actions.'
                       ''.format(exc)))
        else:
            available_opts = [item[0] for item in ACTIONS.values()]
            for count, line in enumerate(meta):
                print('{:3}: {} {}'.format(count, *line))
        answer = input(inverted(', '.join(available_opts) + '? ')).strip()
        if any([answer.startswith(char) for char in AVAILABLE_IDS]):
            ids = [int(item) for item in answer[1:].split(',')]
        if answer == 'a':
            # recover all -> recover all by ids
            answer = 'r'
            ids = range(len(meta))
        if answer == 'q':
            break
        elif answer.startswith('e'):
            # Delete entries
            for entry in ids:
                del content[meta[entry][0]]
            save_file(fname, content)
        elif answer.startswith('r'):
            # recover entries
            for key, entry in [item for (count, item)
                               in enumerate(content.items()) if count in ids]:
                if type(entry['message']) is dict:
                    if '__type' in entry['message']:
                        msg = json.dumps(entry['message'])
                    # backwards compat: dumps had no type info
                    elif '-parser' in entry['bot_id']:
                        msg = message.Report(entry['message']).serialize()
                    else:
                        msg = message.Event(entry['message']).serialize()
                elif issubclass(type(entry['message']), (six.binary_type,
                                                         six.text_type)):
                    msg = entry['message']
                elif entry['message'] is None:
                    print(bold('No message here, deleting directly.'))
                    del content[key]
                    save_file(fname, content)
                    continue
                else:
                    print(bold('Unhandable type of message: {!r}'
                               ''.format(type(entry['message']))))
                    continue
                print(entry['source_queue'])

                default = utils.load_configuration(DEFAULTS_CONF_FILE)
                runtime = utils.load_configuration(RUNTIME_CONF_FILE)
                params = utils.load_parameters(default, runtime)
                pipe = pipeline.PipelineFactory.create(params)
                pipe.set_queues(entry['source_queue'], 'destination')
                pipe.connect()
                pipe.send(msg)
                del content[key]
                save_file(fname, content)
        elif answer.startswith('d'):
            # delete dumpfile
            os.remove(fname)
            print('Deleted file {}'.format(fname))
            break
        elif answer.startswith('s'):
            # Show entries by id
            for count, (key, value) in enumerate(content.items()):
                if count in ids:
                    print('='*100, '\nShowing id {} {}\n'.format(count, key),
                          '-'*50)
                    if isinstance(type(value['message']), (six.binary_type,
                                                           six.text_type)):
                        value['message'] = json.loads(value['message'])
                    value['traceback'] = value['traceback'].splitlines()
                    pprint.pprint(value)
