# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import json
import unittest
import os

import intelmq.lib.test as test
import intelmq.lib.utils as utils
from intelmq.bots.parsers.malwaregroup.parser_ips import MalwareGroupIPsParserBot


with open(os.path.join(os.path.dirname(__file__),
                       'ipaddresses.html')) as handle:
    EXAMPLE_FILE = handle.read()

EXAMPLE_REPORT = {"feed.name": "MalwareGroup",
                  "feed.url": "http://www.malwaregroup.com/ipaddresses",
                  "raw": utils.base64_encode(EXAMPLE_FILE),
                  "__type": "Report",
                  }
EXAMPLE_EVENT = {"feed.name": "MalwareGroup",
                 "feed.url": "http://www.malwaregroup.com/ipaddresses",
                 "__type": "Event",
                 "time.source": "2015-08-01T00:00:00+00:00",
                 "source.ip": "192.0.2.1",
                 "classification.type": "malware",
                 "raw": "PHRkPjxhIGhyZWY9Ii9pcGFkZHJlc3Nlcy9kZXRhaWxzLzE5Mi4wL"
                        "jIuMSI+MTkyLjAuMi4xPC9hPjwvdGQ+IDx0ZD4xPC90ZD4gPHRkPl"
                        "NvbWUgQ291bnRyeTwvdGQ+IDx0ZD4tPC90ZD4gPHRkPjIwMTUtMDg"
                        "tMDE8L3RkPiA8dGQ+MjAxNS0wOC0wMTwvdGQ+PC90cj4=",
                 }


class TestMalwareGroupIPsParserBot(test.BotTestCase, unittest.TestCase):
    """
    A TestCase for a MalwareGroupIPsParserBot.
    """

    def reset_bot(self):
        self.bot_id = 'test-bot'
        self.bot_reference = MalwareGroupIPsParserBot
        self.input_message = json.dumps(EXAMPLE_REPORT)
        super(TestMalwareGroupIPsParserBot, self).reset_bot()

    def test_event(self):
        """ Test if correct Event has been produced. """
        self.reset_bot()
        self.run_bot()
        self.assertEventAlmostEqual(0, EXAMPLE_EVENT)


if __name__ == '__main__':
    unittest.main()
